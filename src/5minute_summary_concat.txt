This week we're going to focus on some of the organizational things that you need to do in order to work together on ML powered products as part of an interdisciplinary team. Machine learning talent tends to be very scarce and expensive to attract. Machinelearning projects often have unclear timelines, and there's a high degree of uncertainty to those timelines.
Data science is kind of like a catch all term for a bunch of different roles in different organizations. In some organizations that data scientist is the same as an ML researcher or an ML engineer. Another organization's data science is a distinct function that is responsible for answering business questions using data. ML work is the responsibility of an ML team.
The AI talent gap is sort of the reality of ML hiring these days. There's more and more people now that are capable of doing ML, but there's still a gap. That gap tends to be in folks that understand more than just the underlying technology, but also have experience in seeing how it fails and how to make its accessible.
A lot of folks when they're hiring ML researchers, they look first at the number of publications they have in top conferences. I think it's really critical to focus entirely on the quality of publications, not the quantity. And then it's also worth remembering that especially these days you really don't need a PhD to do ML research.
If you're looking for a new job, try to hire for strengths and meet a minimum bar for everything else. Emphasize how much they'll be able to learn about ML at your company. Sell the mission of the company and the potential for ML to have an impact on that mission.
For many ML organizations hiring for software engineering is in many ways more important than hiring for ML skills. If you're going to go work in one of these organizations, one of the big advantages is you can get away with being less experienced on the research side. The next evolution of ML organizations, oftentimes, is embedding machine learning directly into business and product teams.
The right way to build machine learning is to be an ML first organization. This looks like a machine learning division of the company that reports up to senior leadership. There's mostly advantages to this model. It's relatively easy to recruit. And most importantly, it's probably easiest to get value out of.
The team size here starts to become larger. A minimum might be something like one data engineer, one ML engineer, potentially a platform engineer or DevOps engineer and potentially a PM. Typically, the requirement will be that you'll need to have a team that has a strong mix of software engineering research and data skills.
Open AI was doing project planning probabilistically. So rather than assuming that like a particular task is going to take a certain amount of time, instead we assign probabilities to let the likelihood of completion of each of these tasks and potentially pursue alternate tasks that allow us to unlock the same dependency in parallel.
MLPMs are responsible for managing the workflow in and out of the ML team. They can help filter out projects that aren't really high priority for the business or aren't good uses of ML. MLPMs can also help educate the rest of the organization on what's possible to do with ML.
Oftentimes they think that this product knows me better than I know myself because that's all the data about me from every interaction I've ever had with software. They think that AI powered products learn from their mistakes and that they generalize to new problems. But I think a better mental model for where you actually get with an ML powered products is a dog that you train to solve a puzzle.
product design is building in feedback loops with your users. So let's talk about some of the different types of feedback that you might collect from your users and how easy it is to use it. Explicit feedback is where you ask your user directly to provide feedback on the model's performance. The Y axis is how much friction does it add to your users to collect this feedback.
Great ML powered products and product experiences are not just, you know, taking existing product that works well in both ML and top of it. They're actually designed from scratch with machine learning. And so one important thing to think about when you're designing your product is how can you help your users make the product experience better by collecting the right type of feedback.